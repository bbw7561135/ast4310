{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 These pages contain a description of AST4310 and additional resources. The pages at the University web site will still be updated (in particular the messages), but the bulk of the materials will be linked here. Practicalities \u00b6 Four hours of lectures and two hours of exercise classes per week (see calendar ) Classes will be held in person unless otherwise directed Given COVID-19 rules, students in quarantine/isolation will be able to participate remotely (see also Software and Tools ) See separate page for syllabus and literature Visualisations and other in-lecture exercises will be shared under resources Assessment \u00b6 The final grade is determined by an assessment of six projects. Project 1 is compulsory but only pass/fail, so it won't factor in the final grade. The following table lists deadline for handing in each project, how much each project weighs in the final grade, and the topic of each project. More details can be found under projects . Deadline Weight Topic Project 1 04.09.2020 Pass/fail Basic spectral line formation Project 2 18.09.2020 10% Line strengths and curve of growth Project 3 02.10.2020 15% La Palma Project 4 23.10.2020 25% Solar stratification and continua Project 5 13.11.2020 25% LTE line formation Project 6 11.12.2020 25% Different options Required software and tools \u00b6 This course will have a strong computational component. Computations are not the end goal, but they will be an important tool to understand the topics we will cover. Research in astrophysics is becoming more and more computational; the course will equip students with the strategies and skills to deal with modern astrophysical problems. Students are expected to have their own laptops, and bring them to classes (including lectures!). The assignments and projects can also be run on the linux machines at the Institute. This may be especially helpful for computationally-heavy calculations that need more compute power. More details can be found under software and tools . The projects are in Jupyter notebook format. Only two programming languages are allowed: Python or Julia . In the classes we will make extensive use of Jupyter lab. In addition, some basic familiarity with git is required - it will be used mostly to download and update assignments.","title":"Introduction"},{"location":"#introduction","text":"These pages contain a description of AST4310 and additional resources. The pages at the University web site will still be updated (in particular the messages), but the bulk of the materials will be linked here.","title":"Introduction"},{"location":"#practicalities","text":"Four hours of lectures and two hours of exercise classes per week (see calendar ) Classes will be held in person unless otherwise directed Given COVID-19 rules, students in quarantine/isolation will be able to participate remotely (see also Software and Tools ) See separate page for syllabus and literature Visualisations and other in-lecture exercises will be shared under resources","title":"Practicalities"},{"location":"#assessment","text":"The final grade is determined by an assessment of six projects. Project 1 is compulsory but only pass/fail, so it won't factor in the final grade. The following table lists deadline for handing in each project, how much each project weighs in the final grade, and the topic of each project. More details can be found under projects . Deadline Weight Topic Project 1 04.09.2020 Pass/fail Basic spectral line formation Project 2 18.09.2020 10% Line strengths and curve of growth Project 3 02.10.2020 15% La Palma Project 4 23.10.2020 25% Solar stratification and continua Project 5 13.11.2020 25% LTE line formation Project 6 11.12.2020 25% Different options","title":"Assessment"},{"location":"#required-software-and-tools","text":"This course will have a strong computational component. Computations are not the end goal, but they will be an important tool to understand the topics we will cover. Research in astrophysics is becoming more and more computational; the course will equip students with the strategies and skills to deal with modern astrophysical problems. Students are expected to have their own laptops, and bring them to classes (including lectures!). The assignments and projects can also be run on the linux machines at the Institute. This may be especially helpful for computationally-heavy calculations that need more compute power. More details can be found under software and tools . The projects are in Jupyter notebook format. Only two programming languages are allowed: Python or Julia . In the classes we will make extensive use of Jupyter lab. In addition, some basic familiarity with git is required - it will be used mostly to download and update assignments.","title":"Required software and tools"},{"location":"literature/","text":"Syllabus \u00b6 The syllabus follows closely chapters of the lecture notes : Radiation quantities Radiation and matter in equilibrium The radiative transfer equation Discrete processes Continuous processes Radiative transfer Literature \u00b6 Lecture notes : Introduction to Astrophysical Radiative Transfer by Rob Rutten Radiative processes in astrophysics by George Rybicki and Alan Lightman The observation and analysis of stellar photospheres by David Gray Introduction to stellar astrophysics, vol.2 : Stellar atmospheres by Erika B\u00f6hm-Vitense Radiative Processes in High Energy Astrophysics by Gabriele Ghiselline Astrophysics of the Diffuse Universe by Mike Dopita and Ralph Sutherland","title":"Syllabus and literature"},{"location":"literature/#syllabus","text":"The syllabus follows closely chapters of the lecture notes : Radiation quantities Radiation and matter in equilibrium The radiative transfer equation Discrete processes Continuous processes Radiative transfer","title":"Syllabus"},{"location":"literature/#literature","text":"Lecture notes : Introduction to Astrophysical Radiative Transfer by Rob Rutten Radiative processes in astrophysics by George Rybicki and Alan Lightman The observation and analysis of stellar photospheres by David Gray Introduction to stellar astrophysics, vol.2 : Stellar atmospheres by Erika B\u00f6hm-Vitense Radiative Processes in High Energy Astrophysics by Gabriele Ghiselline Astrophysics of the Diffuse Universe by Mike Dopita and Ralph Sutherland","title":"Literature"},{"location":"projects/","text":"Projects \u00b6 Warning This page is still under construction. Check later for more content. You will need to hand in six projects in AST4310. Each project will be a computational essay. The project description and questions are available in the course's github repository , under notebooks . The following is an overview of the projects: (more info will be added shortly) Deadline Weight Topic Project 1 04.09.2020 Pass/fail Basic spectral line formation Project 2 18.09.2020 10% Line strengths and curve of growth Project 3 02.10.2020 15% La Palma Project 4 23.10.2020 25% Solar stratification and continua Project 5 13.11.2020 25% LTE line formation Project 6 11.12.2020 25% Different options","title":"Project assignments"},{"location":"projects/#projects","text":"Warning This page is still under construction. Check later for more content. You will need to hand in six projects in AST4310. Each project will be a computational essay. The project description and questions are available in the course's github repository , under notebooks . The following is an overview of the projects: (more info will be added shortly) Deadline Weight Topic Project 1 04.09.2020 Pass/fail Basic spectral line formation Project 2 18.09.2020 10% Line strengths and curve of growth Project 3 02.10.2020 15% La Palma Project 4 23.10.2020 25% Solar stratification and continua Project 5 13.11.2020 25% LTE line formation Project 6 11.12.2020 25% Different options","title":"Projects"},{"location":"resources/","text":"Resources \u00b6 Warning This page is still under construction. Check later for more content.","title":"Resources"},{"location":"resources/#resources","text":"Warning This page is still under construction. Check later for more content.","title":"Resources"},{"location":"tools/","text":"Software and Tools \u00b6 Programming environment \u00b6 This course can be followed using one of two programming languages: Python or Julia. There are two versions for each project: one in Python, one in Julia. In classes, most of the explanations and examples will be given in Python, but it is also possible to replicate them in Julia if there is enough demand. The Python examples are more mature and have undergone more testing; moreover, the Python will normally be more responsive and easier to interact with in a notebook environment because of long Julia compilation times. However, the Julia versions will prove more versatile and faster in the computationally-heavier parts of later projects. Students can either work from their personal laptops or from the linux machines at the Institute. It is recommended that all install the programming environment in their personal laptops to better participate in the classes; the Institute machines can be used for heavier computations. All the required software is already installed in the Institute's Linux machines, to which you can connect to. See the guide on how to use Python at ITA. To install the programming environment in your laptop, see below. Info If you have problems installing the software, you can, as a last resort, run the notebooks from a cloud-based solution via Binder. This has its own issues (e.g. Binder being unavailable, timeouts after 10 minutes of inactivity, etc.), so be sure to save frequently (\"Save\" and then download to your computer). Here's the binder link: . Installing the Python environment \u00b6 To do the assignments you will need Python 3.8.x with Astropy , plus Jupyter and many other dependencies of these packages. Windows \u00b6 Warning If you have a laptop with Windows, the recommended way to install all the packages is to use the Docker with an image that we will provide. This is not yet ready, but we are working on it and will update this page soon. Linux or macOS \u00b6 If you have Linux or macOS, the easiest way to get all the software is to use Docker image (see above). But it is also possible to install your python environment using conda, which will take up less space, be a bit faster, and is probably more useful if you want to keep using some of the packages later. To install python yourself, we recommend using miniconda or Anaconda Python distributions ( python 3.x versions ). Miniconda is recommended because it is a smaller download, but Anaconda works just as well if you already have it or are more familiar with it. Once you have conda installed (either a new install or an older version), the recommended way to install the packages is to create a new enviroment (we'll call it ast4310 ) to ensure you have the most recent versions. You can do this by: conda create -n ast4310 -c conda-forge --yes python = 3 .8 jupyterlab sunpy ipympl bqplot nodejs This will download and install the necessary packages and their ependencies. Next, you need to activate this environment: source activate ast4310 Warning Every time you want to use the newly installed python packages, you must ensure you are running from the ast4310 environment. Once active, your prompt will start with (ast4310) . If you open a new terminal, you will need to activate the environment again. For Jupyterlab, you will also need to install the extensions: jupyter labextension install @jupyter-widgets/jupyterlab-manager jupyter-matplotlib jupyter lab build A notebook is a document where you can combine text, images, and source code. If you are unfamiliar with Jupyter, there are several guides and tutorials . We recommend you use Jupyterlab , the next-generation version of Jupyter. But you can also use the classical notebook interface. Testing installation \u00b6 To make sure you have all necessary software ready, start Jupyterlab from the terminal (if using conda, activate the ast4310 environment): jupyter lab This will then open up a browser with the Jupyterlab launcher. Choose \"Python 3\" notebook, and it will start a new notebook. In the first cell enter the following and run: from astropy import units import matplotlib.pyplot as plt Success If you got no error messages above, your installation is good and you are ready to start! Installing the Julia enviroment \u00b6 To do the assignments you will need Julia 1.5.0 or above, plus Jupyter and a few extra packages. Julia itself is stabilising, but its packages are still changing quickly. It is recommended that you do a fresh install of all packages at the start of the semester, to ensure that all will work consistently with the examples. Windows \u00b6 Warning If you have a laptop with Windows, the recommended way to install all the packages is to use the Docker with an image that we will provide. This is not yet ready, but we are working on it and will update this page soon. Linux or macOS \u00b6 If you have Linux or macOS, the easiest way to get all the software is to use Docker image (see above). But it is also possible to install your Julia environment manually. Download Julia from the official web page and follow the install instructions for your system. Once that is done, start the Julia REPL and enter the package manager (press ] key). Once there, install the necessary packages: ( @v1 . 5 ) pkg > add IJulia Unitful UnitfulRecipes NumericalIntegration Interpolations PhysicalConstants FITSIO Plots LaTeXStrings pluto Note that this will not install Jupyter. To install Jupyter, you will either need to install if via a python installation with conda (strongly recommended, see above). If you have done so, you will need to copy the Julia kernel to the Jupyter kernel directory (in Linux: ~/.local/share/jupyter/kernels , in macOS: ~/Library/Jupyter/kernels/ ). Another option to install Jupyter is from the REPL: using IJulia notebook () This will prompt you to install Jupyter via Conda.jl. Text editor for sharing \u00b6 If needed for remote teaching, we will use the text editor Visual Studio Code and its extension Live Share for remotely sharing a coding session. It is also recommended that you install the Python or Julia extensions for VS Code.","title":"Software and tools"},{"location":"tools/#software-and-tools","text":"","title":"Software and Tools"},{"location":"tools/#programming-environment","text":"This course can be followed using one of two programming languages: Python or Julia. There are two versions for each project: one in Python, one in Julia. In classes, most of the explanations and examples will be given in Python, but it is also possible to replicate them in Julia if there is enough demand. The Python examples are more mature and have undergone more testing; moreover, the Python will normally be more responsive and easier to interact with in a notebook environment because of long Julia compilation times. However, the Julia versions will prove more versatile and faster in the computationally-heavier parts of later projects. Students can either work from their personal laptops or from the linux machines at the Institute. It is recommended that all install the programming environment in their personal laptops to better participate in the classes; the Institute machines can be used for heavier computations. All the required software is already installed in the Institute's Linux machines, to which you can connect to. See the guide on how to use Python at ITA. To install the programming environment in your laptop, see below. Info If you have problems installing the software, you can, as a last resort, run the notebooks from a cloud-based solution via Binder. This has its own issues (e.g. Binder being unavailable, timeouts after 10 minutes of inactivity, etc.), so be sure to save frequently (\"Save\" and then download to your computer). Here's the binder link: .","title":"Programming environment"},{"location":"tools/#installing-the-python-environment","text":"To do the assignments you will need Python 3.8.x with Astropy , plus Jupyter and many other dependencies of these packages.","title":"Installing the Python environment"},{"location":"tools/#windows","text":"Warning If you have a laptop with Windows, the recommended way to install all the packages is to use the Docker with an image that we will provide. This is not yet ready, but we are working on it and will update this page soon.","title":"Windows"},{"location":"tools/#linux-or-macos","text":"If you have Linux or macOS, the easiest way to get all the software is to use Docker image (see above). But it is also possible to install your python environment using conda, which will take up less space, be a bit faster, and is probably more useful if you want to keep using some of the packages later. To install python yourself, we recommend using miniconda or Anaconda Python distributions ( python 3.x versions ). Miniconda is recommended because it is a smaller download, but Anaconda works just as well if you already have it or are more familiar with it. Once you have conda installed (either a new install or an older version), the recommended way to install the packages is to create a new enviroment (we'll call it ast4310 ) to ensure you have the most recent versions. You can do this by: conda create -n ast4310 -c conda-forge --yes python = 3 .8 jupyterlab sunpy ipympl bqplot nodejs This will download and install the necessary packages and their ependencies. Next, you need to activate this environment: source activate ast4310 Warning Every time you want to use the newly installed python packages, you must ensure you are running from the ast4310 environment. Once active, your prompt will start with (ast4310) . If you open a new terminal, you will need to activate the environment again. For Jupyterlab, you will also need to install the extensions: jupyter labextension install @jupyter-widgets/jupyterlab-manager jupyter-matplotlib jupyter lab build A notebook is a document where you can combine text, images, and source code. If you are unfamiliar with Jupyter, there are several guides and tutorials . We recommend you use Jupyterlab , the next-generation version of Jupyter. But you can also use the classical notebook interface.","title":"Linux or macOS"},{"location":"tools/#testing-installation","text":"To make sure you have all necessary software ready, start Jupyterlab from the terminal (if using conda, activate the ast4310 environment): jupyter lab This will then open up a browser with the Jupyterlab launcher. Choose \"Python 3\" notebook, and it will start a new notebook. In the first cell enter the following and run: from astropy import units import matplotlib.pyplot as plt Success If you got no error messages above, your installation is good and you are ready to start!","title":"Testing installation"},{"location":"tools/#installing-the-julia-enviroment","text":"To do the assignments you will need Julia 1.5.0 or above, plus Jupyter and a few extra packages. Julia itself is stabilising, but its packages are still changing quickly. It is recommended that you do a fresh install of all packages at the start of the semester, to ensure that all will work consistently with the examples.","title":"Installing the Julia enviroment"},{"location":"tools/#windows_1","text":"Warning If you have a laptop with Windows, the recommended way to install all the packages is to use the Docker with an image that we will provide. This is not yet ready, but we are working on it and will update this page soon.","title":"Windows"},{"location":"tools/#linux-or-macos_1","text":"If you have Linux or macOS, the easiest way to get all the software is to use Docker image (see above). But it is also possible to install your Julia environment manually. Download Julia from the official web page and follow the install instructions for your system. Once that is done, start the Julia REPL and enter the package manager (press ] key). Once there, install the necessary packages: ( @v1 . 5 ) pkg > add IJulia Unitful UnitfulRecipes NumericalIntegration Interpolations PhysicalConstants FITSIO Plots LaTeXStrings pluto Note that this will not install Jupyter. To install Jupyter, you will either need to install if via a python installation with conda (strongly recommended, see above). If you have done so, you will need to copy the Julia kernel to the Jupyter kernel directory (in Linux: ~/.local/share/jupyter/kernels , in macOS: ~/Library/Jupyter/kernels/ ). Another option to install Jupyter is from the REPL: using IJulia notebook () This will prompt you to install Jupyter via Conda.jl.","title":"Linux or macOS"},{"location":"tools/#text-editor-for-sharing","text":"If needed for remote teaching, we will use the text editor Visual Studio Code and its extension Live Share for remotely sharing a coding session. It is also recommended that you install the Python or Julia extensions for VS Code.","title":"Text editor for sharing"}]}