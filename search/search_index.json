{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 These pages contain a description of AST4310 and additional resources. The pages at the University web site will still be updated (in particular the messages), but the bulk of the materials will be linked here. Practicalities \u00b6 Four hours of lectures and two hours of exercise classes per week (see calendar ) Classes will be held in person unless otherwise directed Given COVID-19 rules, students in quarantine/isolation will be able to participate remotely (see also Software and Tools ) See separate page for syllabus and literature Visualisations and other in-lecture exercises will be shared under resources Communication \u00b6 We will use channel #AST4310 on element.io for communication. Element is a decentralised, encrypted chat network, that works similar to Mattermost or Slack (minus the surveillance and data harvesting). If you don't already have an account on Element, please create a free matrix.org account . To ensure anonymity it is recommended you chose a username that does not reveal your identity. The #AST4310 channel is invite-only and end-to-end encrypted, so when creating an account make sure you remember the security key - you will need it to join the channel. Assessment \u00b6 The final grade is determined by an assessment of six projects. Project 1 is compulsory but only pass/fail, so it won't factor in the final grade. The following table lists deadline for handing in each project, how much each project weighs in the final grade, and the topic of each project. More details can be found under projects . Deadline Weight Topic Project 1 04.09.2020 Pass/fail Basic spectral line formation Project 2 18.09.2020 10% Line strengths and curve of growth Project 3 02.10.2020 15% La Palma Project 4 23.10.2020 25% Solar stratification and continua Project 5 13.11.2020 25% LTE line formation Project 6 11.12.2020 25% Different options Required software and tools \u00b6 This course will have a strong computational component. Computations are not the end goal, but they will be an important tool to understand the topics we will cover. Research in astrophysics is becoming more and more computational; the course will equip students with the strategies and skills to deal with modern astrophysical problems. Students are expected to have their own laptops, and bring them to classes (including lectures!). The assignments and projects can also be run on the linux machines at the Institute. This may be especially helpful for computationally-heavy calculations that need more compute power. More details can be found under software and tools . The projects are in Jupyter notebook format. Only two programming languages are allowed: Python or Julia . In the classes we will make extensive use of Jupyter lab. In addition, some basic familiarity with git is required - it will be used mostly to download and update assignments.","title":"Introduction"},{"location":"#introduction","text":"These pages contain a description of AST4310 and additional resources. The pages at the University web site will still be updated (in particular the messages), but the bulk of the materials will be linked here.","title":"Introduction"},{"location":"#practicalities","text":"Four hours of lectures and two hours of exercise classes per week (see calendar ) Classes will be held in person unless otherwise directed Given COVID-19 rules, students in quarantine/isolation will be able to participate remotely (see also Software and Tools ) See separate page for syllabus and literature Visualisations and other in-lecture exercises will be shared under resources","title":"Practicalities"},{"location":"#communication","text":"We will use channel #AST4310 on element.io for communication. Element is a decentralised, encrypted chat network, that works similar to Mattermost or Slack (minus the surveillance and data harvesting). If you don't already have an account on Element, please create a free matrix.org account . To ensure anonymity it is recommended you chose a username that does not reveal your identity. The #AST4310 channel is invite-only and end-to-end encrypted, so when creating an account make sure you remember the security key - you will need it to join the channel.","title":"Communication"},{"location":"#assessment","text":"The final grade is determined by an assessment of six projects. Project 1 is compulsory but only pass/fail, so it won't factor in the final grade. The following table lists deadline for handing in each project, how much each project weighs in the final grade, and the topic of each project. More details can be found under projects . Deadline Weight Topic Project 1 04.09.2020 Pass/fail Basic spectral line formation Project 2 18.09.2020 10% Line strengths and curve of growth Project 3 02.10.2020 15% La Palma Project 4 23.10.2020 25% Solar stratification and continua Project 5 13.11.2020 25% LTE line formation Project 6 11.12.2020 25% Different options","title":"Assessment"},{"location":"#required-software-and-tools","text":"This course will have a strong computational component. Computations are not the end goal, but they will be an important tool to understand the topics we will cover. Research in astrophysics is becoming more and more computational; the course will equip students with the strategies and skills to deal with modern astrophysical problems. Students are expected to have their own laptops, and bring them to classes (including lectures!). The assignments and projects can also be run on the linux machines at the Institute. This may be especially helpful for computationally-heavy calculations that need more compute power. More details can be found under software and tools . The projects are in Jupyter notebook format. Only two programming languages are allowed: Python or Julia . In the classes we will make extensive use of Jupyter lab. In addition, some basic familiarity with git is required - it will be used mostly to download and update assignments.","title":"Required software and tools"},{"location":"literature/","text":"Syllabus \u00b6 The syllabus follows closely chapters of the lecture notes : Radiation quantities Radiation and matter in equilibrium The radiative transfer equation Discrete processes Continuous processes Radiative transfer Literature \u00b6 Lecture notes : Introduction to Astrophysical Radiative Transfer by Rob Rutten Radiative processes in astrophysics by George Rybicki and Alan Lightman The observation and analysis of stellar photospheres by David Gray Introduction to stellar astrophysics, vol.2 : Stellar atmospheres by Erika B\u00f6hm-Vitense Radiative Processes in High Energy Astrophysics by Gabriele Ghiselline Astrophysics of the Diffuse Universe by Mike Dopita and Ralph Sutherland","title":"Syllabus and literature"},{"location":"literature/#syllabus","text":"The syllabus follows closely chapters of the lecture notes : Radiation quantities Radiation and matter in equilibrium The radiative transfer equation Discrete processes Continuous processes Radiative transfer","title":"Syllabus"},{"location":"literature/#literature","text":"Lecture notes : Introduction to Astrophysical Radiative Transfer by Rob Rutten Radiative processes in astrophysics by George Rybicki and Alan Lightman The observation and analysis of stellar photospheres by David Gray Introduction to stellar astrophysics, vol.2 : Stellar atmospheres by Erika B\u00f6hm-Vitense Radiative Processes in High Energy Astrophysics by Gabriele Ghiselline Astrophysics of the Diffuse Universe by Mike Dopita and Ralph Sutherland","title":"Literature"},{"location":"projects/","text":"Projects \u00b6 Overview \u00b6 There are a total of six projects, to be handed in at different times and with a different weight on the final grade, as listed below. Deadline Weight Topic Project 1 04.09.2020 Pass/fail Basic spectral line formation Project 2 18.09.2020 10% Line strengths and curve of growth Project 3 02.10.2020 15% La Palma Project 4 23.10.2020 25% Solar stratification and continua Project 5 13.11.2020 25% LTE line formation Project 6 11.12.2020 25% Different options: Project 6a 3D Radiative Transfer Project 6b Scattering For project 6 there will be a few different options to chose from (each person/group can only select one). Please check this page to see when new options have been added. Repository \u00b6 The projects are given in Jupyter notebook format, and can be found at the course's github repository . You can download a zip file of the repository from github, but the recommended way to get it is via git, so you can get updates more easily. In a directory of your choice, you can do: $ git clone https://github.com/tiagopereira/ast4310.git This will create a directory called ast4310 in the current directory. If there are any updates, once inside the directory as4310 you can do $ git pull This will update your files to match the latest versions. In some cases, if you have made changes to the project files, you may get an error or a conflict. In these cases, it is generally best to do a git reset and then a git pull . Danger Doing a git reset is generally safe, but it brings back the repository version of the files. If you made any changes to e.g. the notebook files, they will be lost. To avoid this, you should not change the notebook files (ie, files with the questions). Instead, either make a copy or start your edits on a different file. In the notebooks directory there are sub-directories for the different projects. They contain two notebooks: a Python version and a Julia version. In addition, they also contain auxiliary files needed for the computations and images for illustrations. Some projects require the download of large files; those are not included, but should be linked in the notebooks. To see the projects, you should open the notebook files with Jupyter lab. In some cases the LaTeX parts in Markdown may not render. You can try waiting a bit, or re-running (Ctrl+Enter) the problematic markdown cells. In some cases, making a small change (e.g. adding a space) and re-running the cell fixes the problem. Format and delivery \u00b6 The projects should be handed in as Jupyter notebooks (Python or Julia). Please have a look at the Guidelines notebook (under ast4310/notebooks ) for more details on what is expected in the notebooks. There is also a Template notebook that you can copy and use as a starting point for your assignments. The project deliveries will be assessed anonymously, but please remember to include your candidate numbers in the notebook submitted. The assignments will be handed using Devilry . The projects can be handed in individually or in groups of two. It is strongly recommended that students get together in groups for the projects. For Projects 3 and 5, groups will be mandatory and will be assigned. For all other projects, students are free to choose their groups. Info Groups are not enabled in Devilry. This means that students in a group will need to submit the same files on Devilry. The reason for this is that given the chances to improve the grade via the optional peer review (see below), group members will not necessarily have the same final grade for a project. In addition to the notebook file, you should upload also all necessary files to run or notebook, or additional files you created along your notebook (e.g. a data file with the results of a long calculation). You do not need to upload the additional files that were present in the repository (e.g. atom files, images, etc.). Loading data files or code from the internet is not allowed. Grading \u00b6 Project 1 will be pass/fail and have no effect on your final grade (assuming you pass!). The other projects will have weights of 10%, 15%, 25%, 25%, and 25% (see table above). Each project will have a numerical grade between 0 and 100, and the final grade is the weighed sum of all project grades. The final numerical grade will be converted to the A-F scale according to the usual scale: Points Grade 92 - 100 A 77 - 91 B 58 - 76 C 46 - 57 D 40 - 45 E 0 - 39 F The grade of each project can be improved in two ways: by peer review ( 5% extra ), or by submitting an improved version ( up to 30% of points not earned ), see below for details. The improved grade cannot be more than 100 points. Peer review \u00b6 To mimic the peer-review process in scientific publications, you will have the opportunity to review the work of your colleagues. The main goal of peer review is to give constructive feedback so that your colleagues can learn from their mistakes and improve the submission. As a bonus for this extra effort, you will receive an extra 5% on your project grade. Peer review will be double-blind and individual. Each element of a group will be given a different assignment to review. If only one person in the group sends a review report, only that person gets the extra 5%. The bonus will be awarded regardless of the quality of the review report, although submissions that are obviously low quality will receive no bonus. Examples of a low-quality review are: Few comments on the work Meaningless or off-the-mark comments, where it is obvious the reviewer did not properly read the work Contains offensive or inappropriate comments Peer review for the reviewer \u00b6 After the projects are handed in in Devilry, we will work quickly to assign you a project to review. A Jupyter notebook will be sent to you. You should write your review in that notebook, by adding additional markdown cells, enclosing your comments with an HTML box of the following kind: < div style = \"background-color:#e6e6e6; padding:10px; border-style: solid;; border-color:#0d0d0d; border-width:1px\" > Your markdown comments here. * Can also use * a bulleted list, Other markdown, LaTeX: $\\epsilon$, etc. </ div > There is a deadline of one week to submit the peer review, counting from the original submission deadline. Your job as a reviewer is to find out if each question is adequately answered, for example by answering the following questions: Are the assumptions correct, and well spelled out? Are the computations adequate to the job, and the code easy to read? Are there any major flaws in the answer(s)? Is the text well-written and concise? Are plots well laid out? You don't need to answer all of the above, or go exhaustively through the calculations or the code. The point is more to look at the big picture. It is not the job of the reviewer to spell check or correct the language (in scientific publications, this is the job of the editor and/or language editor). If you find there are too many language errors, you can mention it as a general comment, e.g.: This work would benefit from some proofreading, there are several typos and grammatical errors. It is not the job of the reviewer to force her/his view into the writing of the answers, but provide a neutral viewpoint. Do not be afraid to point out mistakes if you find them, but always try to do so in a constructive manner and criticise the work, not the person. Write your feedback as you would like to receive it. Avoid discussing your peer review assignments with your colleagues. The only exception of the above is sharing with your group colleague if you happen to find an answer that is markedly better than your own. This is also a learning experience for you, and in such cases you are encouraged to use what you've learned from other projects when submitting a revised version (see below). If you are using parts of someone else's project in your revised submission, always give credit . E.g. we changed X and Y based on an approach learned from another project we reviewed . In these cases, try to modify your own answer as opposed to copying someone else's answer or source code. Wholesale copying of other answers will be considered cheating. Peer review for the authors \u00b6 About one week after the original submission deadline, you will receive feedback from the teachers plus any feedback from peer review Comments you receive from peer review will not affect your grade, only the assessment by the teachers. Do not take the comments from peer review at face value. It is possible that the reviewer is wrong. Do not take any negative comments personally. The reviewer is commenting on the work that you submitted, not on you as a person. Avoid discussing the comments from peer review outside your group, and especially do not confront other students or suggest she/he was the referee. Submitting an improved version \u00b6 Another way to get bonus point is to submit an improved version of your project. You will be able to get 30% of the points you did not get in the first submission. For example, assume you got 50 in your first submission. This means that you can gain up to 30% of 50 points, or 15 points. If you got 80 points initially, you can get up to 6 points more, and so on. Submitting an improved version is optional. The goal is not to work towards a perfect delivery, but to make you reflect on your answers and learn from any shortcomings. You should consider the feedback you got from the teachers and from the peer review when working on a revised version. Trivial resubmissions with little improvement will not get bonus points. The bonus points will be awarded if there is improvement, even if the revised answer is not 100% correct. How much improvement is enough? That will be decided on a case-by-case basis. But the bar will not be set very high. Bonus points from submitting an improved version will be added to both group members. As in the original submission, both will be asked to submit the new version on Devilry.","title":"Project assignments"},{"location":"projects/#projects","text":"","title":"Projects"},{"location":"projects/#overview","text":"There are a total of six projects, to be handed in at different times and with a different weight on the final grade, as listed below. Deadline Weight Topic Project 1 04.09.2020 Pass/fail Basic spectral line formation Project 2 18.09.2020 10% Line strengths and curve of growth Project 3 02.10.2020 15% La Palma Project 4 23.10.2020 25% Solar stratification and continua Project 5 13.11.2020 25% LTE line formation Project 6 11.12.2020 25% Different options: Project 6a 3D Radiative Transfer Project 6b Scattering For project 6 there will be a few different options to chose from (each person/group can only select one). Please check this page to see when new options have been added.","title":"Overview"},{"location":"projects/#repository","text":"The projects are given in Jupyter notebook format, and can be found at the course's github repository . You can download a zip file of the repository from github, but the recommended way to get it is via git, so you can get updates more easily. In a directory of your choice, you can do: $ git clone https://github.com/tiagopereira/ast4310.git This will create a directory called ast4310 in the current directory. If there are any updates, once inside the directory as4310 you can do $ git pull This will update your files to match the latest versions. In some cases, if you have made changes to the project files, you may get an error or a conflict. In these cases, it is generally best to do a git reset and then a git pull . Danger Doing a git reset is generally safe, but it brings back the repository version of the files. If you made any changes to e.g. the notebook files, they will be lost. To avoid this, you should not change the notebook files (ie, files with the questions). Instead, either make a copy or start your edits on a different file. In the notebooks directory there are sub-directories for the different projects. They contain two notebooks: a Python version and a Julia version. In addition, they also contain auxiliary files needed for the computations and images for illustrations. Some projects require the download of large files; those are not included, but should be linked in the notebooks. To see the projects, you should open the notebook files with Jupyter lab. In some cases the LaTeX parts in Markdown may not render. You can try waiting a bit, or re-running (Ctrl+Enter) the problematic markdown cells. In some cases, making a small change (e.g. adding a space) and re-running the cell fixes the problem.","title":"Repository"},{"location":"projects/#format-and-delivery","text":"The projects should be handed in as Jupyter notebooks (Python or Julia). Please have a look at the Guidelines notebook (under ast4310/notebooks ) for more details on what is expected in the notebooks. There is also a Template notebook that you can copy and use as a starting point for your assignments. The project deliveries will be assessed anonymously, but please remember to include your candidate numbers in the notebook submitted. The assignments will be handed using Devilry . The projects can be handed in individually or in groups of two. It is strongly recommended that students get together in groups for the projects. For Projects 3 and 5, groups will be mandatory and will be assigned. For all other projects, students are free to choose their groups. Info Groups are not enabled in Devilry. This means that students in a group will need to submit the same files on Devilry. The reason for this is that given the chances to improve the grade via the optional peer review (see below), group members will not necessarily have the same final grade for a project. In addition to the notebook file, you should upload also all necessary files to run or notebook, or additional files you created along your notebook (e.g. a data file with the results of a long calculation). You do not need to upload the additional files that were present in the repository (e.g. atom files, images, etc.). Loading data files or code from the internet is not allowed.","title":"Format and delivery"},{"location":"projects/#grading","text":"Project 1 will be pass/fail and have no effect on your final grade (assuming you pass!). The other projects will have weights of 10%, 15%, 25%, 25%, and 25% (see table above). Each project will have a numerical grade between 0 and 100, and the final grade is the weighed sum of all project grades. The final numerical grade will be converted to the A-F scale according to the usual scale: Points Grade 92 - 100 A 77 - 91 B 58 - 76 C 46 - 57 D 40 - 45 E 0 - 39 F The grade of each project can be improved in two ways: by peer review ( 5% extra ), or by submitting an improved version ( up to 30% of points not earned ), see below for details. The improved grade cannot be more than 100 points.","title":"Grading"},{"location":"projects/#peer-review","text":"To mimic the peer-review process in scientific publications, you will have the opportunity to review the work of your colleagues. The main goal of peer review is to give constructive feedback so that your colleagues can learn from their mistakes and improve the submission. As a bonus for this extra effort, you will receive an extra 5% on your project grade. Peer review will be double-blind and individual. Each element of a group will be given a different assignment to review. If only one person in the group sends a review report, only that person gets the extra 5%. The bonus will be awarded regardless of the quality of the review report, although submissions that are obviously low quality will receive no bonus. Examples of a low-quality review are: Few comments on the work Meaningless or off-the-mark comments, where it is obvious the reviewer did not properly read the work Contains offensive or inappropriate comments","title":"Peer review"},{"location":"projects/#peer-review-for-the-reviewer","text":"After the projects are handed in in Devilry, we will work quickly to assign you a project to review. A Jupyter notebook will be sent to you. You should write your review in that notebook, by adding additional markdown cells, enclosing your comments with an HTML box of the following kind: < div style = \"background-color:#e6e6e6; padding:10px; border-style: solid;; border-color:#0d0d0d; border-width:1px\" > Your markdown comments here. * Can also use * a bulleted list, Other markdown, LaTeX: $\\epsilon$, etc. </ div > There is a deadline of one week to submit the peer review, counting from the original submission deadline. Your job as a reviewer is to find out if each question is adequately answered, for example by answering the following questions: Are the assumptions correct, and well spelled out? Are the computations adequate to the job, and the code easy to read? Are there any major flaws in the answer(s)? Is the text well-written and concise? Are plots well laid out? You don't need to answer all of the above, or go exhaustively through the calculations or the code. The point is more to look at the big picture. It is not the job of the reviewer to spell check or correct the language (in scientific publications, this is the job of the editor and/or language editor). If you find there are too many language errors, you can mention it as a general comment, e.g.: This work would benefit from some proofreading, there are several typos and grammatical errors. It is not the job of the reviewer to force her/his view into the writing of the answers, but provide a neutral viewpoint. Do not be afraid to point out mistakes if you find them, but always try to do so in a constructive manner and criticise the work, not the person. Write your feedback as you would like to receive it. Avoid discussing your peer review assignments with your colleagues. The only exception of the above is sharing with your group colleague if you happen to find an answer that is markedly better than your own. This is also a learning experience for you, and in such cases you are encouraged to use what you've learned from other projects when submitting a revised version (see below). If you are using parts of someone else's project in your revised submission, always give credit . E.g. we changed X and Y based on an approach learned from another project we reviewed . In these cases, try to modify your own answer as opposed to copying someone else's answer or source code. Wholesale copying of other answers will be considered cheating.","title":"Peer review for the reviewer"},{"location":"projects/#peer-review-for-the-authors","text":"About one week after the original submission deadline, you will receive feedback from the teachers plus any feedback from peer review Comments you receive from peer review will not affect your grade, only the assessment by the teachers. Do not take the comments from peer review at face value. It is possible that the reviewer is wrong. Do not take any negative comments personally. The reviewer is commenting on the work that you submitted, not on you as a person. Avoid discussing the comments from peer review outside your group, and especially do not confront other students or suggest she/he was the referee.","title":"Peer review for the authors"},{"location":"projects/#submitting-an-improved-version","text":"Another way to get bonus point is to submit an improved version of your project. You will be able to get 30% of the points you did not get in the first submission. For example, assume you got 50 in your first submission. This means that you can gain up to 30% of 50 points, or 15 points. If you got 80 points initially, you can get up to 6 points more, and so on. Submitting an improved version is optional. The goal is not to work towards a perfect delivery, but to make you reflect on your answers and learn from any shortcomings. You should consider the feedback you got from the teachers and from the peer review when working on a revised version. Trivial resubmissions with little improvement will not get bonus points. The bonus points will be awarded if there is improvement, even if the revised answer is not 100% correct. How much improvement is enough? That will be decided on a case-by-case basis. But the bar will not be set very high. Bonus points from submitting an improved version will be added to both group members. As in the original submission, both will be asked to submit the new version on Devilry.","title":"Submitting an improved version"},{"location":"resources/","text":"Resources \u00b6 Warning This page is still under construction. Check later for more content.","title":"Resources"},{"location":"resources/#resources","text":"Warning This page is still under construction. Check later for more content.","title":"Resources"},{"location":"tools/","text":"Software and Tools \u00b6 Programming environment \u00b6 This course can be followed using one of two programming languages: Python or Julia. There are two versions for each project: one in Python, one in Julia. In classes, most of the explanations and examples will be given in Python, but it is also possible to replicate them in Julia if there is enough demand. The Python examples are more mature and have undergone more testing; moreover, the Python will normally be more responsive and easier to interact with in a notebook environment because of long Julia compilation times. However, the Julia versions will prove more versatile and faster in the computationally-heavier parts of later projects. Students can either work from their personal laptops or from the linux machines at the Institute. It is recommended that all install the programming environment in their personal laptops to better participate in the classes; the Institute machines can be used for heavier computations. All the required software is already installed in the Institute's Linux machines, to which you can connect to. See the guide on how to use Python at ITA. To install the programming environment in your laptop, see below. Info If you have problems installing the software, you can, as a last resort, run the notebooks from a cloud-based solution via Binder. This has its own issues (e.g. Binder being unavailable, timeouts after 10 minutes of inactivity, etc.), so be sure to save frequently (\"Save\" and then download to your computer). Here's the binder link: . Installing the Python environment \u00b6 To do the assignments you will need Python 3.8.x with Astropy , plus Jupyter and many other dependencies of these packages. Windows (using Docker) \u00b6 The recommended way to get all the python packages working in Linux is to use Docker . Docker runs a virtual Linux container alongside your operative system, in our case one that already has all the necessary packages installed. Start by downloading Docker Install Docker (administrator priviledges are required) Test your installation by opening a terminal window (Command Prompt or PowerShell) and entering: > docker --version Docker version 19.03.1 If you get a similar output to the above (version may vary), you should be good. Now you will need to download the Docker image \"snowgum/astronomy-python\": > docker pull snowgum/astronomy-python Unable to find image 'snowgum/astronomy-python:latest' locally latest: Pulling from snowgum/astronomy-python 692c352adcf2: Pull complete 97058a342707: Pull complete 2821b8e766f4: Pull complete (...) This will be several hundreds of MB, so may take a while. You should now have a fully working Linux container with Jupyter lab, and many scientific python packages. You can start it from the terminal. Be sure to navigate to the directory where you have the AST4310 notebooks . Then, run: > docker run --rm -p 8888:8888 -e JUPYTER_ENABLE_LAB=yes -v \"%cd%\":/home/jovyan/work snowgum/astronomy-python Tip If you use PowerShell instead of the Command Prompt, you may have to replace the part %cd% with $pwd . Likewise if you run macOS or Linux, replace with $PWD . This tells Docker to start running the container snowgum/astronomy-python and link the current directory to a directory called work inside the container. The output of the command above should show the messages from Jupyter starting. In particular, it should have a few lines such as: To access the notebook, open this file in a browser: file:///home/jovyan/.local/share/jupyter/runtime/nbserver-7-open.html Or copy and paste one of these URLs: http://cdd3b0fdf72f:8888/?token=ffa4fd380e9ece6fa12a63ad73b2a74bd5a2c4cbb01c95df or http://127.0.0.1:8888/?token=ffa4fd380e9ece6fa12a63ad73b2a74bd5a2c4cbb01c95df Copy paste the second link (host 127.0.0.1) and open in your web browser. Jupyter lab should start. Linux or macOS \u00b6 If you have Linux or macOS, the easiest way to get all the software is to use Docker image (see above). But it is also possible to install your python environment using conda, which will take up less space, be a bit faster, and is probably more useful if you want to keep using some of the packages later. To install python yourself, we recommend using miniconda or Anaconda Python distributions ( python 3.x versions ). Miniconda is recommended because it is a smaller download, but Anaconda works just as well if you already have it or are more familiar with it. Once you have conda installed (either a new install or an older version), the recommended way to install the packages is to create a new enviroment (we'll call it ast4310 ) to ensure you have the most recent versions. You can do this by: conda create -n ast4310 -c conda-forge --yes python = 3 .8 jupyterlab sunpy ipympl bqplot nodejs This will download and install the necessary packages and their ependencies. Next, you need to activate this environment: source activate ast4310 Warning Every time you want to use the newly installed python packages, you must ensure you are running from the ast4310 environment. Once active, your prompt will start with (ast4310) . If you open a new terminal, you will need to activate the environment again. For Jupyterlab, you will also need to install the extensions: jupyter labextension install @jupyter-widgets/jupyterlab-manager jupyter-matplotlib bqplot jupyter lab build A notebook is a document where you can combine text, images, and source code. If you are unfamiliar with Jupyter, there are several guides and tutorials . We recommend you use Jupyterlab , the next-generation version of Jupyter. But you can also use the classical notebook interface. Testing installation \u00b6 To make sure you have all necessary software ready, start Jupyterlab from the terminal (if using conda, activate the ast4310 environment): jupyter lab This will then open up a browser with the Jupyterlab launcher. Choose \"Python 3\" notebook, and it will start a new notebook. In the first cell enter the following and run: from astropy import units import matplotlib.pyplot as plt Success If you got no error messages above, your installation is good and you are ready to start! Installing the Julia enviroment \u00b6 To do the assignments you will need Julia 1.5.0 or above, plus Jupyter and a few extra packages. Julia itself is stabilising, but its packages are still changing quickly. It is recommended that you do a fresh install of all packages at the start of the semester, to ensure that all will work consistently with the examples. Windows \u00b6 Warning If you have a laptop with Windows, the recommended way to install all the packages is to use the Docker with an image that we will provide. This is not yet ready, but we are working on it and will update this page soon. Linux or macOS \u00b6 If you have Linux or macOS, the easiest way to get all the software is to use Docker image (see above). But it is also possible to install your Julia environment manually. Download Julia from the official web page and follow the install instructions for your system. Once that is done, start the Julia REPL and enter the package manager (press ] key). Once there, install the necessary packages: ( @v1 . 5 ) pkg > add IJulia Unitful UnitfulRecipes NumericalIntegration Interpolations PhysicalConstants FITSIO Plots LaTeXStrings pluto Note that this will not install Jupyter. To install Jupyter, you will either need to install if via a python installation with conda (strongly recommended, see above). If you have done so, you will need to copy the Julia kernel to the Jupyter kernel directory (in Linux: ~/.local/share/jupyter/kernels , in macOS: ~/Library/Jupyter/kernels/ ). Another option to install Jupyter is from the REPL: using IJulia notebook () This will prompt you to install Jupyter via Conda.jl. Text editor for sharing \u00b6 If needed for remote teaching, we will use the text editor Visual Studio Code and its extension Live Share for remotely sharing a coding session. It is also recommended that you install the Python or Julia extensions for VS Code.","title":"Software and tools"},{"location":"tools/#software-and-tools","text":"","title":"Software and Tools"},{"location":"tools/#programming-environment","text":"This course can be followed using one of two programming languages: Python or Julia. There are two versions for each project: one in Python, one in Julia. In classes, most of the explanations and examples will be given in Python, but it is also possible to replicate them in Julia if there is enough demand. The Python examples are more mature and have undergone more testing; moreover, the Python will normally be more responsive and easier to interact with in a notebook environment because of long Julia compilation times. However, the Julia versions will prove more versatile and faster in the computationally-heavier parts of later projects. Students can either work from their personal laptops or from the linux machines at the Institute. It is recommended that all install the programming environment in their personal laptops to better participate in the classes; the Institute machines can be used for heavier computations. All the required software is already installed in the Institute's Linux machines, to which you can connect to. See the guide on how to use Python at ITA. To install the programming environment in your laptop, see below. Info If you have problems installing the software, you can, as a last resort, run the notebooks from a cloud-based solution via Binder. This has its own issues (e.g. Binder being unavailable, timeouts after 10 minutes of inactivity, etc.), so be sure to save frequently (\"Save\" and then download to your computer). Here's the binder link: .","title":"Programming environment"},{"location":"tools/#installing-the-python-environment","text":"To do the assignments you will need Python 3.8.x with Astropy , plus Jupyter and many other dependencies of these packages.","title":"Installing the Python environment"},{"location":"tools/#windows-using-docker","text":"The recommended way to get all the python packages working in Linux is to use Docker . Docker runs a virtual Linux container alongside your operative system, in our case one that already has all the necessary packages installed. Start by downloading Docker Install Docker (administrator priviledges are required) Test your installation by opening a terminal window (Command Prompt or PowerShell) and entering: > docker --version Docker version 19.03.1 If you get a similar output to the above (version may vary), you should be good. Now you will need to download the Docker image \"snowgum/astronomy-python\": > docker pull snowgum/astronomy-python Unable to find image 'snowgum/astronomy-python:latest' locally latest: Pulling from snowgum/astronomy-python 692c352adcf2: Pull complete 97058a342707: Pull complete 2821b8e766f4: Pull complete (...) This will be several hundreds of MB, so may take a while. You should now have a fully working Linux container with Jupyter lab, and many scientific python packages. You can start it from the terminal. Be sure to navigate to the directory where you have the AST4310 notebooks . Then, run: > docker run --rm -p 8888:8888 -e JUPYTER_ENABLE_LAB=yes -v \"%cd%\":/home/jovyan/work snowgum/astronomy-python Tip If you use PowerShell instead of the Command Prompt, you may have to replace the part %cd% with $pwd . Likewise if you run macOS or Linux, replace with $PWD . This tells Docker to start running the container snowgum/astronomy-python and link the current directory to a directory called work inside the container. The output of the command above should show the messages from Jupyter starting. In particular, it should have a few lines such as: To access the notebook, open this file in a browser: file:///home/jovyan/.local/share/jupyter/runtime/nbserver-7-open.html Or copy and paste one of these URLs: http://cdd3b0fdf72f:8888/?token=ffa4fd380e9ece6fa12a63ad73b2a74bd5a2c4cbb01c95df or http://127.0.0.1:8888/?token=ffa4fd380e9ece6fa12a63ad73b2a74bd5a2c4cbb01c95df Copy paste the second link (host 127.0.0.1) and open in your web browser. Jupyter lab should start.","title":"Windows (using Docker)"},{"location":"tools/#linux-or-macos","text":"If you have Linux or macOS, the easiest way to get all the software is to use Docker image (see above). But it is also possible to install your python environment using conda, which will take up less space, be a bit faster, and is probably more useful if you want to keep using some of the packages later. To install python yourself, we recommend using miniconda or Anaconda Python distributions ( python 3.x versions ). Miniconda is recommended because it is a smaller download, but Anaconda works just as well if you already have it or are more familiar with it. Once you have conda installed (either a new install or an older version), the recommended way to install the packages is to create a new enviroment (we'll call it ast4310 ) to ensure you have the most recent versions. You can do this by: conda create -n ast4310 -c conda-forge --yes python = 3 .8 jupyterlab sunpy ipympl bqplot nodejs This will download and install the necessary packages and their ependencies. Next, you need to activate this environment: source activate ast4310 Warning Every time you want to use the newly installed python packages, you must ensure you are running from the ast4310 environment. Once active, your prompt will start with (ast4310) . If you open a new terminal, you will need to activate the environment again. For Jupyterlab, you will also need to install the extensions: jupyter labextension install @jupyter-widgets/jupyterlab-manager jupyter-matplotlib bqplot jupyter lab build A notebook is a document where you can combine text, images, and source code. If you are unfamiliar with Jupyter, there are several guides and tutorials . We recommend you use Jupyterlab , the next-generation version of Jupyter. But you can also use the classical notebook interface.","title":"Linux or macOS"},{"location":"tools/#testing-installation","text":"To make sure you have all necessary software ready, start Jupyterlab from the terminal (if using conda, activate the ast4310 environment): jupyter lab This will then open up a browser with the Jupyterlab launcher. Choose \"Python 3\" notebook, and it will start a new notebook. In the first cell enter the following and run: from astropy import units import matplotlib.pyplot as plt Success If you got no error messages above, your installation is good and you are ready to start!","title":"Testing installation"},{"location":"tools/#installing-the-julia-enviroment","text":"To do the assignments you will need Julia 1.5.0 or above, plus Jupyter and a few extra packages. Julia itself is stabilising, but its packages are still changing quickly. It is recommended that you do a fresh install of all packages at the start of the semester, to ensure that all will work consistently with the examples.","title":"Installing the Julia enviroment"},{"location":"tools/#windows","text":"Warning If you have a laptop with Windows, the recommended way to install all the packages is to use the Docker with an image that we will provide. This is not yet ready, but we are working on it and will update this page soon.","title":"Windows"},{"location":"tools/#linux-or-macos_1","text":"If you have Linux or macOS, the easiest way to get all the software is to use Docker image (see above). But it is also possible to install your Julia environment manually. Download Julia from the official web page and follow the install instructions for your system. Once that is done, start the Julia REPL and enter the package manager (press ] key). Once there, install the necessary packages: ( @v1 . 5 ) pkg > add IJulia Unitful UnitfulRecipes NumericalIntegration Interpolations PhysicalConstants FITSIO Plots LaTeXStrings pluto Note that this will not install Jupyter. To install Jupyter, you will either need to install if via a python installation with conda (strongly recommended, see above). If you have done so, you will need to copy the Julia kernel to the Jupyter kernel directory (in Linux: ~/.local/share/jupyter/kernels , in macOS: ~/Library/Jupyter/kernels/ ). Another option to install Jupyter is from the REPL: using IJulia notebook () This will prompt you to install Jupyter via Conda.jl.","title":"Linux or macOS"},{"location":"tools/#text-editor-for-sharing","text":"If needed for remote teaching, we will use the text editor Visual Studio Code and its extension Live Share for remotely sharing a coding session. It is also recommended that you install the Python or Julia extensions for VS Code.","title":"Text editor for sharing"}]}